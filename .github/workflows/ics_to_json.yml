name: ICS to JSON
on:
  workflow_dispatch:
    inputs:
      force:
        description: 'Force regeneration even if ICS unchanged'
        required: false
        default: 'false'
      enrich_titles:
        description: 'Fetch event page subtitle into title field (default true)'
        required: false
        default: 'true'
  schedule:
    - cron: '0 * * * *'

permissions:
  contents: write
  issues: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ICS_URL: ${{ vars.ICS_URL }}
      REPO_VARIABLE: ${{ vars.REPO_VARIABLE }}
      OUTPUT_FILE: ${{ vars.OUTPUT_FILE }}
      FORCE_REBUILD: ${{ github.event.inputs.force }}
      MANUAL_ENRICH: ${{ github.event.inputs.enrich_titles }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Load failure streak
        id: load_streak
        run: |
          if [ -f .ci/failure-streak ]; then
            count=$(cat .ci/failure-streak || echo 0)
          else
            count=0
          fi
          echo "current=$count" >> "$GITHUB_OUTPUT"
      - name: Check ICS change
        id: check_change
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${ICS_URL}" ]; then
            echo "ICS_URL not set" >&2; exit 1; fi
          echo "Fetching ICS for change detection: $ICS_URL"
          curl -fsSL "$ICS_URL" -o current.ics
          new_hash=$(sha256sum current.ics | cut -d ' ' -f1)
          echo "New ICS SHA256: $new_hash"
          prev_hash=""
          if gh release view latest --json body >/dev/null 2>&1; then
            prev_hash=$(gh release view latest --json body -q '.body' | grep -Eo 'ICS_SHA256:[0-9a-f]+' | cut -d: -f2 || echo "")
          fi
          echo "Previous ICS SHA256: ${prev_hash:-<none>}"
          if [ "${FORCE_REBUILD:-false}" = "true" ]; then
            echo "Force rebuild requested via workflow_dispatch input." | tee -a "$GITHUB_STEP_SUMMARY"
            echo "skip=false" >> "$GITHUB_OUTPUT"
            echo "hash=$new_hash" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$new_hash" = "$prev_hash" ] && [ -n "$prev_hash" ]; then
            echo "ICS unchanged; skipping generation." | tee -a "$GITHUB_STEP_SUMMARY"
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi
          echo "hash=$new_hash" >> "$GITHUB_OUTPUT"
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
        if: steps.check_change.outputs.skip != 'true'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        if: steps.check_change.outputs.skip != 'true'
      - name: Run tests
        run: pytest -q
        if: steps.check_change.outputs.skip != 'true'
      - name: Generate JSON
        if: steps.check_change.outputs.skip != 'true'
        run: |
          set -euo pipefail
          echo "ICS_URL=${ICS_URL}"
          : "${OUTPUT_FILE:=events.json}"  # default if unset/empty
          echo "OUTPUT_FILE=${OUTPUT_FILE}"
          if [ -z "${ICS_URL}" ]; then
            echo "ICS_URL is empty. Define repository variable 'ICS_URL'." >&2
            exit 1
          fi
          # Decide enrichment: schedule always true; manual defaults true unless explicitly set false
          ENRICH_EFFECTIVE="true"
          if [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            case "${MANUAL_ENRICH}" in
              ""|"true"|"True"|"TRUE") ENRICH_EFFECTIVE="true" ;;
              "false"|"False"|"FALSE") ENRICH_EFFECTIVE="false" ;;
            esac
          fi
          ENRICH_FLAG=""
          if [ "${ENRICH_EFFECTIVE}" = "true" ]; then
            ENRICH_FLAG="--enrich-titles"
            echo "Enrichment: enabled"
          else
            echo "Enrichment: disabled"
          fi
          python -m src.main --ics-url "${ICS_URL}" --repo-variable "${REPO_VARIABLE}" --output "${OUTPUT_FILE}" ${ENRICH_FLAG}
      - name: Publish release asset (latest)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.check_change.outputs.skip != 'true'
        run: |
          set -euo pipefail
          : "${OUTPUT_FILE:=events.json}"
          TAG=latest
          TITLE="Latest events JSON"
          BODY="Automated update of events feed.\nICS_SHA256:${{ steps.check_change.outputs.hash }}"
          # If release exists, delete it (so it's guaranteed to be 'latest')
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Deleting existing release $TAG to refresh timestamp";
            gh release delete "$TAG" -y || true
          fi
          gh release create "$TAG" "$OUTPUT_FILE" \
            --title "$TITLE" \
            --notes "$BODY" \
            --latest
          echo "Release asset URL (public): https://github.com/${GITHUB_REPOSITORY}/releases/latest/download/${OUTPUT_FILE}" >> "$GITHUB_STEP_SUMMARY"
      - name: Upload JSON artifact
        uses: actions/upload-artifact@v4
        with:
          name: events-json
          path: ${{ env.OUTPUT_FILE || 'events.json' }}
        if: steps.check_change.outputs.skip != 'true'
      - name: Reset failure streak on success
        if: success()
        run: |
          mkdir -p .ci
          prior=${{ steps.load_streak.outputs.current }}
          if [ "$prior" != "0" ]; then
            echo 0 > .ci/failure-streak
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add .ci/failure-streak
            git commit -m "chore(ci): reset failure streak to 0 [skip ci]" || true
            git push origin HEAD:main || true
          fi
          echo "Failure streak reset (prior=$prior)." >> $GITHUB_STEP_SUMMARY
      - name: Handle failure (increment streak, maybe open issue)
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p .ci
          prior=${{ steps.load_streak.outputs.current }}
          new=$((prior + 1))
          echo $new > .ci/failure-streak
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .ci/failure-streak
          git commit -m "chore(ci): failure streak $new [skip ci]" || true
          git push origin HEAD:main || true
          # Ensure label exists
          gh label list --search ci-failure | grep -qi '^ci-failure' || gh label create ci-failure --color FF0000 --description "Automated CI failure alerts" || true
          if [ "$new" -ge 3 ]; then
            existing=$(gh issue list --state open --label ci-failure --search "ICS feed processing failures" --json number -q '.[0].number' || echo "")
            if [ -z "$existing" ]; then
              gh issue create --title "ICS feed processing failures (streak $new)" --label ci-failure --body "The ICS to JSON workflow has failed $new consecutive times. Please investigate logs." || true
            else
              gh issue comment "$existing" --body "Another failure (streak $new)." || true
            fi
          fi
          echo "Failure streak incremented to $new" >> $GITHUB_STEP_SUMMARY
