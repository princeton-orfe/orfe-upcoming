name: ICS to JSON
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      # Repository variables (set in Settings > Variables > Repository variables)
      ICS_URL: ${{ vars.ICS_URL }}
      REPO_VARIABLE: ${{ vars.REPO_VARIABLE }}
      OUTPUT_FILE: ${{ vars.OUTPUT_FILE }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest -q
      - name: Generate JSON
        run: |
          set -euo pipefail
          echo "ICS_URL=${ICS_URL}"
          : "${OUTPUT_FILE:=events.json}"  # default if unset/empty
          echo "OUTPUT_FILE=${OUTPUT_FILE}"
          if [ -z "${ICS_URL}" ]; then
            echo "ICS_URL is empty. Define repository variable 'ICS_URL'." >&2
            exit 1
          fi

          python -m src.main --ics-url "${ICS_URL}" --repo-variable "${REPO_VARIABLE}" --output "${OUTPUT_FILE}" 
      - name: Publish release asset (latest)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          : "${OUTPUT_FILE:=events.json}"
          TAG=latest
          TITLE="Latest events JSON"
          BODY="Automated update of events feed."
          # If release exists, delete it (so it's guaranteed to be 'latest')
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Deleting existing release $TAG to refresh timestamp";
            gh release delete "$TAG" -y || true
          fi
          gh release create "$TAG" "$OUTPUT_FILE" \
            --title "$TITLE" \
            --notes "$BODY" \
            --latest
          echo "Release asset URL (public): https://github.com/${GITHUB_REPOSITORY}/releases/latest/download/${OUTPUT_FILE}" >> "$GITHUB_STEP_SUMMARY"
      - name: Upload JSON artifact
        uses: actions/upload-artifact@v4
        with:
          name: events-json
          path: ${{ env.OUTPUT_FILE || 'events.json' }}
